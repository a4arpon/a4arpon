{
  "Multi-line Comment": {
    "prefix": "mlcomment",
    "body": [
        "/*",
        "* |------------------------------------------------------------------------",
        "* | $1",
        "* |------------------------------------------------------------------------",
        "*/",
        "$0"
    ],
    "description": "Multi-line comment block"
  },
  "Arrow Function": {
    "prefix": "afunc",
    "body": ["const $1 = ($2) => {", "  $3", "};", "$0"],
    "description": "Arrow function"
  },
  "Function Declaration": {
    "prefix": "function",
    "body": ["function $1($2) {", "  $3", "}", "$0"],
    "description": "Function declaration"
  },
  "Anonymous Arrow Function": {
    "prefix": "anfn",
    "body": ["($1) => $2", "$0"],
    "description": "Anonymous arrow function"
  },
  "Catch Block": {
    "prefix": "catch",
    "body": ["catch ($1) {", "  console.error($1.message);", "  $2", "}", "$0"],
    "description": "Catch block for try-catch"
  },
  "Class Declaration": {
    "prefix": "class",
    "body": ["class $1 {", "  constructor($2) {", "    $3", "  }", "}", "$0"],
    "description": "Class declaration with constructor"
  },
  "Constructor": {
    "prefix": "constructor",
    "body": ["constructor($1) {", "  $2", "}", "$0"],
    "description": "Constructor for a class"
  },
  "Object Destructuring": {
    "prefix": "dobject",
    "body": ["const { $1 } = $2;", "$0"],
    "description": "Object destructuring"
  },
  "Array Destructuring": {
    "prefix": "darray",
    "body": ["const [$1] = $2;", "$0"],
    "description": "Array destructuring"
  },
  "Console Log": {
    "prefix": "clg",
    "body": ["console.log($1);", "$0"],
    "description": "Console log"
  },
  "Console Log with Label": {
    "prefix": "log",
    "body": ["console.log('$1:', $2);", "$0"],
    "description": "Console log with label"
  },
  "Method Declaration": {
    "prefix": "method",
    "body": ["public $1($2) {", "  $3", "}", "$0"],
    "description": "Method declaration inside a class"
  },
  "Public Arrow Method": {
    "prefix": "amethod",
    "body": ["$1 = ($2) => {", "  $3", "};", "$0"],
    "description": "Public arrow method inside a class"
  },
  "Private Method Declaration": {
    "prefix": "privatemethod",
    "body": ["private $1($2) {", "  $3", "}", "$0"],
    "description": "Private method declaration inside a class"
  },
  "For Loop": {
    "prefix": "for",
    "body": ["for (let $1 = 0; $1 < $2; $1++) {", "  $3", "}", "$0"],
    "description": "For loop"
  },
  "For...of Loop": {
    "prefix": "forof",
    "body": ["for (const $1 of $2) {", "  $3", "}", "$0"],
    "description": "For...of loop"
  },
  "For...in Loop": {
    "prefix": "forin",
    "body": ["for (const $1 in $2) {", "  if ($2.hasOwnProperty($1)) {", "    $3", "  }", "}", "$0"],
    "description": "For...in loop"
  },
  "While Loop": {
    "prefix": "while",
    "body": ["while ($1) {", "  $2", "}", "$0"],
    "description": "While loop"
  },
  "Do...While Loop": {
    "prefix": "dowhile",
    "body": ["do {", "  $1", "} while ($2);", "$0"],
    "description": "Do...while loop"
  },
  "ForEach Loop": {
    "prefix": "foreach",
    "body": ["$1.forEach(($2) => {", "  $3", "});", "$0"],
    "description": "ForEach loop"
  },
  "Map Loop": {
    "prefix": "map",
    "body": ["const $1 = $2.map(($3) => {", "  $4", "  return $5;", "});", "$0"],
    "description": "Map loop"
  },
  "Reduce Loop": {
    "prefix": "reduce",
    "body": [
      "const $1 = $2.reduce(($3, $4) => {",
      "  $5", 
      "  return $6;", 
      "}, $7);", 
      "$0"
    ],
    "description": "Reduce loop"
  },
  "Filter Loop": {
    "prefix": "filter",
    "body": [
      "const $1 = $2.filter(($3) => {", 
      "  return $4;", 
      "});", 
      "$0"
    ],
    "description": "Filter loop"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if ($1) {", "  $2", "}", "$0"],
    "description": "If statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if ($1) {", "  $2", "} else {", "  $3", "}", "$0"],
    "description": "If-else statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": ["switch ($1) {", "  case $2:", "    $3", "    break;", "  default:", "    $4", "}", "$0"],
    "description": "Switch statement"
  },
  "Try-Catch Block": {
    "prefix": "trycatch",
    "body": ["try {", "  $1", "} catch ($2) {", "  console.error($2.message);", "}", "$0"],
    "description": "Try-catch block"
  },
  "Set Timeout": {
    "prefix": "settimeout",
    "body": ["setTimeout(() => {", "  $1", "}, $2);", "$0"],
    "description": "Set timeout"
  },
  "Set Interval": {
    "prefix": "setinterval",
    "body": ["setInterval(() => {", "  $1", "}, $2);", "$0"],
    "description": "Set interval"
  }
}

